AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Grafana on ECS Fargate with Lambda for Start/Stop"

Resources:

  # ---------------- VPC & Networking ----------------
  GrafanaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: GrafanaVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref GrafanaVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GrafanaVPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GrafanaVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP access to Grafana"
      VpcId: !Ref GrafanaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: "0.0.0.0/0"

  # ---------------- ECS Cluster & Task Definition ----------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "grafana-cluster"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ECSExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  GrafanaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "grafana-task"
      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: "grafana"
          Image: "grafana/grafana:latest"
          PortMappings:
            - ContainerPort: 3000

  GrafanaService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref GrafanaTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet
          SecurityGroups:
            - !Ref SecurityGroup
          AssignPublicIp: ENABLED

  # ---------------- Lambda Function for ECS Start/Stop ----------------
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaECSControl"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: !GetAtt GrafanaService.Arn

  StartStopLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "StartStopGrafanaECS"
      Runtime: python3.9
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaIAMRole.Arn
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ECSCluster
          SERVICE_NAME: !Ref GrafanaService
      Code:
        ZipFile: |
          import os
          import boto3
          ecs = boto3.client('ecs')

          CLUSTER_NAME = os.environ['CLUSTER_NAME']
          SERVICE_NAME = os.environ['SERVICE_NAME']

          def lambda_handler(event, context):
              action = event.get('action', 'start')
              desired_count = 1 if action == 'start' else 0
              
              ecs.update_service(
                  cluster=CLUSTER_NAME,
                  service=SERVICE_NAME,
                  desiredCount=desired_count
              )
              
              return f"ECS Service {SERVICE_NAME} updated to desired count: {desired_count}"

Outputs:

  GrafanaPublicIP:
    Description: "Grafana Public Endpoint"
    Value: !Sub "http://${AWS::StackName}.elb.${AWS::Region}.amazonaws.com:3000"
